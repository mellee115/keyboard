import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.scss'
import {useEffect} from 'react';

export default function Home() {

  const path = '/notes/';
  const ext = '.mp3';

  const whiteKeys = [
    'C3',
    'D3',
    'E3',
    'F3',
    'G3',
    'A3',
    'B3',
    'C4',
    'D4',
    'E4',
    'F4',
    'G4',
    'A4',
    'B4',
  ];

  const keyboard = {
    'KeyW':         'C-3',
    'KeyA':         'C3',
    'KeyS':         'D3',
    'KeyE':         'D-3',
    'KeyD':         'E3',
    'KeyF':         'F3',
    'KeyT':         'F-3',
    'KeyG':         'G3',
    'KeyY':         'G-3',
    'KeyH':         'A3',
    'KeyU':         'A-3',
    'KeyJ':         'B3',
    'KeyK':         'C4',
    'KeyO':         'C-4',
    'KeyL':         'D4',
    'KeyP':         'D-4',
    'Semicolon':    'E4',
    'Quote':        'F4',
    'Enter':        'G4',
    'Backslash':    'G-4',
  }

  /**
   * plays the note by given id
   * @param keyId */
  const playNote = (keyId) =>{
    document.getElementById(keyId).play();
  }

  /**
   * determines the note to play on key press when there is a mapping present
   * @param e */
  const keyDownHandler = (e) => {
    let id = keyboard[e.code];
    id && playNote(id);
  }

  useEffect(() => {
    document.addEventListener("keydown", keyDownHandler);
    // clean up
    return () => {
      document.removeEventListener("keydown", keyDownHandler);
    };
  }, []);

  return (
    <div className={styles.container}>
      <Head>
        <title>keyboard</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          keyboard
        </h1>

        <p className={styles.description}>
          Care to play a little tune?
        </p>

        <div className={styles.piano}>

          {whiteKeys.map((key) => {
            return(
              <div className={styles.whiteKey} key={key} onClick={()=>playNote(key)}>
                <audio id={key} src={`${path}${key.toLowerCase()}${ext}`}/>
                {!(key.includes('E') || key.includes('B'))
                &&
                // Need to make the black keys clickable since click events are triggering the parent
                <div className={styles.blackKey} key={key} onClick={()=>playNote(key)}>
                  <audio id={`${key[0]}-${key[1]}`} src={`${path}${key[0].toLowerCase()}-${key[1]}${ext}`}/>
                </div>
                }
                <p className={styles.whiteNote}>{key}</p>
              </div>
            )
          })
          }
        </div>
      </main>
      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}